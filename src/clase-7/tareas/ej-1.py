#!/usr/bin/env python3

# Ejercicio 1: Manejo b√°sico con SIGTERM
#
# Objetivo: Familiarizarse con el uso de SIGTERM y funciones de limpieza al finalizar un proceso.
#
# Enunciado:
# Crea un programa que capture la se√±al SIGTERM y, en respuesta, muestre un mensaje de despedida. 
# Aseg√∫rate de registrar una funci√≥n con atexit para que se ejecute al terminar el proceso, 
# independientemente del motivo de finalizaci√≥n.

import signal
import time
import atexit
import os
import sys

# Variable global para controlar si recibimos SIGTERM
recibido_sigterm = False

def cleanup_function():
    """
    Funci√≥n de limpieza que se ejecuta autom√°ticamente al terminar el proceso.
    atexit garantiza que se ejecute sin importar c√≥mo termine el programa:
    - Terminaci√≥n normal
    - Excepci√≥n no capturada  
    - Se√±ales que terminan el proceso
    """
    print("üßπ [CLEANUP] Funci√≥n de limpieza ejecut√°ndose...")
    print("üßπ [CLEANUP] Liberando recursos, cerrando archivos, etc.")
    print("üßπ [CLEANUP] Limpieza completada")

def sigterm_handler(signum, frame):
    """
    Handler para la se√±al SIGTERM.
    
    SIGTERM (15) es la se√±al est√°ndar para solicitar terminaci√≥n elegante:
    - Enviada por 'kill <pid>' por defecto
    - Permite al proceso hacer cleanup antes de salir
    - Diferente a SIGKILL (9) que termina inmediatamente sin cleanup
    
    Args:
        signum: N√∫mero de la se√±al (15 para SIGTERM)
        frame: Frame del stack donde se interrumpi√≥ la ejecuci√≥n
    """
    global recibido_sigterm
    
    print(f"\nüíÄ [SIGTERM] Recibida se√±al {signum} (SIGTERM)")
    print("üíÄ [SIGTERM] Iniciando terminaci√≥n elegante...")
    print("üíÄ [SIGTERM] Mensaje de despedida: ¬°Adi√≥s mundo!")
    
    recibido_sigterm = True
    
    # Salir despu√©s del mensaje (atexit se ejecutar√° autom√°ticamente)
    print("üíÄ [SIGTERM] Terminando proceso...")
    sys.exit(0)

def main():
    """
    Funci√≥n principal que demuestra el manejo b√°sico de SIGTERM
    """
    print("=== Ejercicio 1: Manejo b√°sico con SIGTERM ===")
    print(f"PID del proceso: {os.getpid()}")
    print("Registrando handlers...")
    
    # Registrar funci√≥n de cleanup que se ejecuta al terminar
    atexit.register(cleanup_function)
    print("‚úÖ Funci√≥n cleanup registrada con atexit")
    
    # Registrar handler para SIGTERM
    signal.signal(signal.SIGTERM, sigterm_handler)
    print("‚úÖ Handler para SIGTERM registrado")
    
    print("\nüìã Instrucciones:")
    print(f"1. En otra terminal, ejecuta: kill {os.getpid()}")
    print(f"2. O ejecuta: kill -TERM {os.getpid()}")
    print("3. Observa c√≥mo se ejecuta el handler y luego la funci√≥n cleanup")
    print("4. Tambi√©n puedes terminar con Ctrl+C para ver solo la funci√≥n cleanup")
    
    print("\n‚è≥ Esperando se√±ales... (bucle infinito)")
    print("   Ctrl+C para terminar normalmente")
    print("   kill <pid> para enviar SIGTERM")
    
    try:
        # Bucle principal - simular trabajo
        contador = 0
        while True:
            contador += 1
            print(f"‚ö° Trabajando... iteraci√≥n {contador}")
            time.sleep(2)
            
            # Salir si recibimos SIGTERM (aunque el handler ya termina el proceso)
            if recibido_sigterm:
                break
                
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è  [CTRL+C] Terminaci√≥n por teclado")
        print("‚å®Ô∏è  [CTRL+C] La funci√≥n cleanup se ejecutar√° autom√°ticamente")
        # No necesitamos llamar sys.exit() aqu√≠, Python terminar√° normalmente
        # y atexit ejecutar√° cleanup_function()

if __name__ == "__main__":
    main()